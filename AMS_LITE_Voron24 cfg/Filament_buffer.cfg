####################################################################################
#                   缓冲器-开始
#  挤出机和同步挤出机需要校准，如果两个误差太大，适当调整[gcode_macro buffer]内的加减1.5为适合自己的值
#  在需要同步的地方加入buffer_start(一般是开始打印，恢复打印的宏里),开启与关闭缓冲器建议直接改成sensor on/off
####################################################################################
###参考木子小阳HCQ的原始代码###
###修复bug###
[filament_switch_sensor buffer]	#耗材开关传感器。支持使用开关传感器（如限位开关）进行耗材插入和耗尽检测。
pause_on_runout: False		    #请注意, 如果 pause_on_runout 为 False 并且没有定义
event_delay: 7.0                #事件之间的最小延迟时间（秒）,在这个时间段内触发的事件将被默许忽略。
switch_pin:!PG12                 #连接到检测开关的引脚。
runout_gcode:
    {% set svv = printer.save_variables.variables %}   ###获取断电时候的耗材的序号 “0、1、2、3”
    Set_Rotation{svv.currentextruder} 
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=t{svv.currentextruder} DISTANCE={svv.rd - 1.5}
    {action_respond_info("read extruder %s"%(svv.rd))} 
    {action_respond_info("set t %d fast %s"%(svv.currentextruder, svv.rd - 1.5))} 
insert_gcode:
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=t{svv.currentextruder} DISTANCE={svv.rd}


[gcode_macro buffer_start]
gcode:
      #buffer M=0
      #buffer M=1
      SET_FILAMENT_SENSOR SENSOR=buffer ENABLE=1

[gcode_macro buffer_OFF]
gcode:
      SET_FILAMENT_SENSOR SENSOR=buffer ENABLE=0

[gcode_macro Set_Rotation0]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set original = printer.configfile.settings['extruder_stepper t0'].rotation_distance %}
    SAVE_VARIABLE VARIABLE=rd VALUE={original}  #把最后一次激活的挤出的rotation记录在外部文件里

[gcode_macro Set_Rotation1]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set original = printer.configfile.settings['extruder_stepper t1'].rotation_distance %}
    SAVE_VARIABLE VARIABLE=rd VALUE={original}

[gcode_macro Set_Rotation2]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set original = printer.configfile.settings['extruder_stepper t2'].rotation_distance %}
    SAVE_VARIABLE VARIABLE=rd VALUE={original}

[gcode_macro Set_Rotation3]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set original = printer.configfile.settings['extruder_stepper t3'].rotation_distance %}
    SAVE_VARIABLE VARIABLE=rd VALUE={original}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
