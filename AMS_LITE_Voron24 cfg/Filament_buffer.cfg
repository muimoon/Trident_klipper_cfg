####################################################################################
#                   缓冲器-开始
#  挤出机和同步挤出机需要校准，如果两个误差太大，适当调整[gcode_macro buffer]内的加减1.5为适合自己的值
#  在需要同步的地方加入buffer_start(一般是开始打印，恢复打印的宏里),开启与关闭缓冲器建议直接改成sensor on/off
####################################################################################
###参考木子小阳HCQ的原始代码###
###注意：触发逻辑和原版相反###
[delayed_gcode fastkeep]         
initial_duration: 0             
gcode:           
   {% if printer['filament_switch_sensor buffer'].filament_detected == 0 %}   ##如果不触发缓冲器
         {action_respond_info("fastkeeping......")}    ##代码调试行，调试完毕建议删除，这样不会有刷屏记录
         UPDATE_DELAYED_GCODE ID=fastkeep DURATION=7                                    
   {% else %}        
         UPDATE_DELAYED_GCODE ID=fastkeep DURATION=0 
         buffer M=0
   {% endif %}                                                              

[gcode_macro buffer]
variable_rd_original:0
gcode:
    {% set m = params.M|default(0)|int %}          ##设置一个宏观变量M/默认值0/整数类型
    {% set svv = printer.save_variables.variables %}   ###获取断电时候的耗材的序号 “0、1、2、3”
   
     Set_Rotation{svv.currentextruder}  ##优先触发加速的挤出率赋值，如果检测到缓冲器已经被按下，再恢复原值
     {% if m != 0 %}      
          ##加速挤出代码在读取挤出速率时优先级始终高于Set_Rotation，这会导致最后一次的挤出率赋值不正确，20240220 by muimoon
          ##目前强制buffer执行两次来解决这个问题
          SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=t{svv.currentextruder} DISTANCE={rd_original - 1.5 } 
          UPDATE_DELAYED_GCODE ID=fastkeep DURATION=5                        ##更新buffer的延时数据（DURATION）数据
      {% else %} 
          SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=t{svv.currentextruder} DISTANCE={rd_original}  #恢复原始值 
      {% endif %}

##目前强制buffer执行两次来解决这个问题,启用buffer代码通过buffer_start来实现
[gcode_macro buffer_start]
gcode:
      buffer M=0
      buffer M=1

[gcode_macro Set_Rotation0]
gcode:
    {% set original = printer.configfile.settings['extruder_stepper t0'].rotation_distance %}
    SET_GCODE_VARIABLE MACRO=buffer VARIABLE=rd_original VALUE={original}

[gcode_macro Set_Rotation1]
gcode:
    {% set original = printer.configfile.settings['extruder_stepper t1'].rotation_distance %}
    SET_GCODE_VARIABLE MACRO=buffer VARIABLE=rd_original VALUE={original}

[gcode_macro Set_Rotation2]
gcode:
    {% set original = printer.configfile.settings['extruder_stepper t2'].rotation_distance %}
    SET_GCODE_VARIABLE MACRO=buffer VARIABLE=rd_original VALUE={original}

[gcode_macro Set_Rotation3]
gcode:
    {% set original = printer.configfile.settings['extruder_stepper t3'].rotation_distance %}
    SET_GCODE_VARIABLE MACRO=buffer VARIABLE=rd_original VALUE={original}


[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}