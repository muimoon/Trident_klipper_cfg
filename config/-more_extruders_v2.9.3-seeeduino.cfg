#匹配换色gcodev2.2
########################################
############### 换色配置 ################
#[四色滑槽选择]、[无外部判断方案方案2-逻辑2]、[全手动挤出机配置]、[分离送料和加载料流程]、[分步换色修改为一键换色]、[调整配置逻辑 分离hardware software]、[一键装卸耗材]、[开启开机确认宏]
#[缓存高低限位，耗材加载时触发高限位立即停]-230722、[添加从Ta直接切换到Tb]、[分离耗材回抽前冲击-0923]、[添加缓冲器开关-1029bug]
########################################
# 外部配置文件引入
[include MCU1_seeeduino_rename_pins.cfg] #feiw 引入兔子主板的重映射pin
[include extrafunction.cfg] #额外功能

########################################
# 变量
########################################
# params变量 #
# params.TEMPERATURE ##切片Gcode添加 temperature=[nozzle_temperature]
[save_variables]
filename: ~/printer_data/config/last_tunnel.var

[gcode_macro set_Lastextruder]
description:把指定挤出机的序列号写入文件
gcode:
        {% set x= params.WAKEUP|default(0)|int %}  
        SAVE_VARIABLE VARIABLE=lastextruder VALUE={x}

########################################
# 多色启动宏
########################################
[gcode_macro COLORS_VAR_START]
description: prepare for begining of the print job, lastextruder will write to now_filament variable, updated by muimoon 20240408
gcode:
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set svv = printer.save_variables.variables %}                                ###获取断电时候的耗材的序号 “0、1、2、3”

  #reset_continue #Filament continue status reset at the begining of the printing
  MANUAL_STEPPER STEPPER=filament_select SET_POSITION=0 MOVE=360 STOP_ON_ENDSTOP=1
    ## 【如果指定STOP_ON_ENDSTOP=1，则如果ENDSTOP报告触发，则移动将提前结束（使用STOP_ON_ENDSTOP=2完成移动，即使ENDSTOP未触发，也不会出错】
  MANUAL_STEPPER STEPPER=filament_select SET_POSITION=0 MOVE=0
    ##   MANUAL_STEPPER STEPPER=filament_select MOVE=180                             # 由于改成了同步挤出模式，默认T0工况为夹住T0
  SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=now_filament VALUE={svv.lastextruder}           # 修改耗材色号为最后一次使用的耗材
  { action_respond_info("Last Extruder: T%d" % (svv.lastextruder) ) }

[gcode_macro Tn]
description: 将当前切换为Tn(保证当前为Tn耗材) #【用法：C_T[next_extruder] C_TEMP=[nozzle_temperature_range_high] T_TEMP=[nozzle_temperature]】
gcode:
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set now_filament = COLORS_VAR.now_filament|int %}
  {% set new_filament = params.T_FILAMENT|int %}
  {% set C_temp = params.C_TEMP|default(220)|float %}  #feiw 传参 颜色切换时变化温度
  {% set change_number = COLORS_VAR.change_number|int %} #feiw 换色次数
  {% set runout= printer['gcode_macro COLORS_VAR']['runout'] %}	
  {% set T_temp = params.T_temp|default(220)|float %}  #feiw 传参 对应的T0耗材打印温度
  
  {% if runout == 0 %}  
      SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=runout VALUE={1} #set runout detect
  {% endif %}
  
  #SAVE_GCODE_STATE # 保存当前g代码坐标解析状态，便于进行Gcode编辑后恢复状态
  {% if now_filament != new_filament %}                #feiw 判断当前耗材丝，如果不等于T{new_filament}
      { action_respond_info("Change from: T%d to T%d" % (now_filament, new_filament) ) }
      M117 switch filament
      pause
      #change_dock                                        #feiw 移动到换色坞
      {% if now_filament != -1 %}                        #feiw 判断当前耗材丝，如果不等于T-1
          J_Tn T_FILAMENT={now_filament}                   #feiw 复夹持当前耗材
          #change_dock                                      #feiw 移动到换色坞
          change_out T_FILAMENT={now_filament}             #feiw 执行换色前处理(退丝) 本步骤总含有温度确认 不足加热到default_temp
      {% endif %}    
      J_Tn T_FILAMENT={new_filament}                     #feiw 加载T0耗材(夹持)
      M104 S{T_temp}                                     #feiw 切换耗材最高温度
      change_in T_FILAMENT={new_filament}                #feiw 执行换色后处理(进丝) 本步骤总含有温度确认 不足加热到default_temp
      {% if runout == 2 %}  
          UnJ_T T_FILAMENT={new_filament}                    #feiw 卸载当前耗材夹持
      {% endif %}
  {% else %}
      UnJ_T T_FILAMENT={new_filament}                    #feiw 卸载当前耗材夹持
      { action_respond_info("Keep current tunnel T%d" % (new_filament) ) }
      M117 keep tunnel，no need to change
  {% endif %}
  SAVE_VARIABLE VARIABLE=lastextruder VALUE={new_filament}
  SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=change_number VALUE={change_number + 1}  # 每次执行 换色次数+1
  { action_respond_info("Filament change %d times " % (change_number) ) }
  M117 switch successfully
  M117 continue printing
  #RESTORE_GCODE_STATE # 恢复当前g代码坐标解析状态
  SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=runout VALUE={0} #restore runout

[gcode_macro COLORS_VAR]
description: 保存换色相关变量的空宏
variable_huichou: 100 #125           #feiw 切换宏中的回抽长度参数值【耗材融化处到送料管出口出的长度，该数据为测量挤出头到近程挤出机送料齿轮的长度。数据为参考值，初始设置建议偏大5mm-10mm，但不可小于测量值】
variable_safe0: 50               #feiw 切换宏中的回抽和退料长度衔接点后移参数值(挤出机和手动送料步进电机协同工作长度的额外增量)【用于耗材丝离开挤出机后仍有一段与送料电机协作过程，作为退料的安全量】
variable_jinliao: 50 #125            #feiw 切换宏中的加载耗材时前进长度的参数值【耗材离开送料管进入挤出机后前进长度】
variable_safe1: 0 #35               #feiw 切换宏中的加载和送料长度衔接点后移参数值(挤出机和手动送料步进电机协同工作长度的额外增量)【用于耗材丝进入挤出机时提前与送料电机协作工作，作为进料的安全量】
variable_songsi02: 55  #175      #feiw 切换宏中的耗材预备位置(4in1开始处)到远程送料口出口的长度
variable_songsi13: 55 #175    #feiw 耗材从储备位移动到目标位置长度（由于安装问题，“0,2”耗材和“1,3”耗材到达目标位置需要挤出长度不同
variable_bowdenspeed: 5500      #feiw 切换宏中的送料管阶段速度，以F单位格式[F:毫米/每分钟]
variable_jiazaispeed: 360        #feiw 切换进料宏中的远近双挤出协同进入加热块阶段速度，以F单位格式
## 同步段挤出速度最好低于预设 （F300 5mm/s 6.01mm³/s）（F360 6mm/s 7.21mm³/s） （F420 7mm/s 8.41mm³/s）（F480 8mm/s 9.62mm³/s）（F540 9mm/s 10.82mm³/s）
# 下列：回抽前挤出相关
variable_ramming_in: 35         #feiw 切换退料宏中的“抽离前”挤出阶段长度（mm）
variable_ramming_out: 125         #feiw 切换退料宏中的“抽离时”高速回抽阶段长度（mm）
variable_rammingspeed: 1000      #feiw 切换退料宏中的“抽离时”高速回抽阶段速度，以F单位格式

#下列：停靠坞相关
variable_xm6: 180                 #feiw change_dock中停靠X坐标
variable_ym6: 3                #feiw change_dock中停靠Y坐标
variable_nozzlex: 150            #feiw 换色耗材挤出后断开路过擦嘴点后的停靠坐标（本机change_dock坐标的x方向为擦嘴，定义该坐标后机器每次换料结束经过擦嘴断开冲洗耗材）

#下列：温度判定相关
variable_min_temp: 180           #feiw 低于该温度不加热
variable_default_temp: 200       #feiw 默认加热的温度

#变量数组的创建【不要改】
variable_colorselector = [180, 0, -90, 90] #对应四色模块的旋转值
variable_now_filament: 0         #feiw 当前加载的耗材色号，通过【SET_GCODE_VARIABLE MACRO=<macro_name> VARIABLE=<name> VALUE=<value>】修改，例:SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=Thaoma VALUE=1
variable_change_number:0         #换色次数记录
#variable_colorserial = [0, 1, 2, 3]        #对应四色模块的耗材色号【暂时没想好】
gcode:
# variable_colorselector = [2.4, 24.0, 44.8, 71.2, 92.0, 113.6, 139.2, 160.8, 181.6] #变量数组的创建
# {printer["gcode_macro _ERCF_VAR"].colorselector[params.TOOL|int]}                  #变量数组的调用

########################################
# 换色前后准备宏（暂定打印 可能切料 移动到指定区域 ）
########################################
# SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 设置耗材检测停用
# MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED=35 ACCEL=6000 MOVE={huichou+safe0} SYNC=0
## 将耗材手动步进电机和挤出机同步匹配 (设置当前位置为0坐标、速度为35mm/s（等效F2100）、加速度为移动{huichou}长度、允许和后面的Gcode同步执行) 
## 【添加“SYNC=0”后，下一行需要存在G代码方可执行（执行下一行的G代码时同步运行）】

[gcode_macro change_out]   #feiw 耗材切换前处理
description: 耗材切换处理-卸载耗材
gcode:
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set huichou = COLORS_VAR.huichou|int %}               # 设置变量“高速回抽长度”
  {% set safe0 = COLORS_VAR.safe0|int %}                   # 设置变量“回抽长度和退料长度衔接点后移”
  {% set songsi02 = COLORS_VAR.songsi02|int %}             # 设置变量“T0,T2送丝长度”
  {% set songsi13 = COLORS_VAR.songsi13|int %}             # 设置变量“T1,T3送丝长度”
  {% set bowdenspeed = COLORS_VAR.bowdenspeed|int %}       # 设置变量“管内速度”
  {% set min_temp = COLORS_VAR.min_temp|int %}             # 设置变量“最低挤出温度判定”
  {% set default_temp = COLORS_VAR.default_temp|int %}     # 设置变量“低于最低挤出温度后设定默认温度”
  {% set rammingspeed = COLORS_VAR.rammingspeed|int %}     # 设置变量“冲击-脱离加热块速度”
  {% set ramming_in = COLORS_VAR.ramming_in|int %}         # 设置变量“冲击-脱离加热块前长度”
  {% set ramming_out = COLORS_VAR.ramming_out|int %}       # 设置变量“冲击-脱离加热块过程长度”
  {% set Current_T = params.T_FILAMENT|float %}            # T_FILAMENT=(0,1,2,3) 引用虚拟外部变量(指定耗材号)

  #SAVE_GCODE_STATE     # 保存当前g代码坐标解析状态，便于进行Gcode编辑后恢复状态
  #切料在这里之前
  CUT
  #{% if printer.extruder.temperature < min_temp %}     #feiw 如果当前挤出机温度不够 加热挤出机到默认温度
  #    M109 S{default_temp}
  #{% else %}
  #    #M104 S{printer.extruder.temperature}               #feiw 保持温度不变
  #{% endif %}

  #G91                                                  # 设置相对坐标模式(G91)
  G90
  M83                                                  # 挤出机使用相对定位
  {% if Current_T == 0 or Current_T == 2 %}
  #feiw 【对于T0,T2耗材，回抽方向顺时针】
      # 回抽退料，用于快速离开热端  F:毫米/每分钟 
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={rammingspeed/60} ACCEL=5000 MOVE={ramming_out} SYNC=0 # 将耗材手动步进电机和挤出机同步（设置相同的参数）。速度单位不同：45mm/s（等效F2700）
      G1 E-{ramming_out} F{rammingspeed}                             # F:毫米/每分钟 【手动步进电机的速度单位为mm/s,与G1指令的F命令不同】
      M400                                               # 等待当前所有移动指令完成
      # 回抽退料，用于慢速离开挤出机  F:毫米/每分钟
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={1800/60} ACCEL=5000 MOVE={huichou+safe0-ramming_out} SYNC=0 #25
      G1 E-{huichou+safe0-ramming_out} F1800 #25
      M400
      #G4 P2000                                          # 驻留：G4 P<毫秒> 【调试阶段用】
      # 送料管退料
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={bowdenspeed/60} ACCEL=3000 MOVE={songsi02-safe0} #5
  #{% else %}
  {% elif Current_T == 1 or Current_T == 3 %}
  #feiw 【对于T1,T3耗材，回抽方向逆时针】
      # 回抽退料，用于快速离开热端  F:毫米/每分钟
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={rammingspeed/60} ACCEL=5000 MOVE=-{ramming_out} SYNC=0
      G1 E-{ramming_out} F{rammingspeed}
      M400                                               # 等待当前所有移动指令完成
      # 回抽退料，用于慢速离开挤出机  F:毫米/每分钟
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={1800/60} ACCEL=5000 MOVE=-{huichou+safe0-ramming_out} SYNC=0
      G1 E-{huichou+safe0-ramming_out} F1800
      M400
      #G4 P2000                                          # 驻留：G4 P<毫秒> 【调试阶段用】
      #送料管退料
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={bowdenspeed/60} ACCEL=3000 MOVE=-{songsi13-safe0}
  {% endif %}
  #RESTORE_GCODE_STATE   # 恢复当前g代码坐标解析状态 如果指定“MOVE=1”，则将发出刀头移动以返回到先前的 XYZ 位置。如果指定了“MOVE_SPEED”，则刀头移动将以给定速度（以毫米/秒为单位）执行；否则工具头移动将使用恢复的 g 代码速度。
  
[gcode_macro change_in]   #feiw 耗材切换后处理
description: 耗材切换处理-加载耗材
gcode:
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set jinliao = COLORS_VAR.jinliao|int %}               # 设置变量“新耗材加载前进长度”
  {% set safe1 = COLORS_VAR.safe1|int %}                   # 设置变量“进料长度和送料长度衔接点后移”
  {% set songsi02 = COLORS_VAR.songsi02|int %}             # 设置变量“T0,T2送丝长度”
  {% set songsi13 = COLORS_VAR.songsi13|int %}             # 设置变量“T1,T3送丝长度”
  {% set bowdenspeed = COLORS_VAR.bowdenspeed|int %}       # 设置变量“管内速度”
  {% set jiazaispeed = COLORS_VAR.jiazaispeed|int %}       # 设置变量“双挤出同步段进料速度”
  {% set min_temp = COLORS_VAR.min_temp|int %}             # 设置变量“最低挤出温度判定”
  {% set default_temp = COLORS_VAR.default_temp|int %}     # 设置变量“低于最低挤出温度后设定默认温度”
  # 设置旧温度为宏反馈温度（如果想要用“params.TEMPERATURE”获取温度，要在切片的开始Gcode中添加“temperature=[nozzle_temperature]”）（“printer.extruder.temperature”为当前热端温度）
  {% set Current_T = params.T_FILAMENT|float %}        # T_FILAMENT=(0,1,2,3) 引用虚拟外部变量(指定耗材号)
  {% set runout= printer['gcode_macro COLORS_VAR']['runout'] %}				

  #SAVE_GCODE_STATE                                     # 保存当前g代码坐标解析状态，便于进行Gcode编辑后恢复状态
  #{% if printer.extruder.temperature < min_temp %}     #feiw 如果当前挤出机温度不够 加热挤出机到默认温度
  #  M109 S{default_temp}
  #{% else %}
  #  M104 S{printer.extruder.temperature}               #feiw 保持温度不变
  #{% endif %}

  G90
  M83                                                  # 挤出机使用相对定位
  # 以下为换料后加载耗材挤出料宏
  G92 E0                                               # 重置当前E坐标为0
  {% if Current_T == 0 or Current_T == 2 %}
  #feiw 【对于T0,T2耗材，回抽方向顺时针】
    # 【推进耗材加载 0、2】
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={bowdenspeed/60} ACCEL=3000 MOVE=-{songsi02-safe1}
      M400                                             # 等待当前所有移动指令完成
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={jiazaispeed/60} ACCEL=6000 MOVE=-{jinliao+safe1} SYNC=0    # 将耗材手动步进电机和挤出机同步匹配 (设置当前位置为0坐标、速度为{jiazaispeed/60}、移动{huichou}长度、允许和后面的Gcode同步执行)
      G1 E{jinliao+safe1} F{jiazaispeed}                 # F:毫米/每分钟   【等效5mm/s 6.01流量】   预设 （F360 6mm/s 7.21mm³/s） （F420 7mm/s 8.41mm³/s）（F480 8mm/s 9.62mm³/s）（F540 9mm/s 10.82mm³/s）   
      M400                                               # 等待当前所有移动指令完成
      {% if runout == 1 %}       
            UPDATE_DELAYED_GCODE ID=HSLoading DURATION=7
      {% endif %}	
  {% elif Current_T == 1 or Current_T == 3 %}
      # 推进耗材1、3加载【无缓冲】
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={bowdenspeed/60} ACCEL=3000 MOVE={songsi13-safe1}
      M400                                     # 驻留：G4 P<毫秒> 【调试阶段用】
      MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED={jiazaispeed/60} ACCEL=6000 MOVE={jinliao+safe1} SYNC=0
      G1 E{jinliao+safe1} F{jiazaispeed}                 # F:毫米/每分钟
      M400    # 等待当前所有移动指令完成
      {% if runout == 1 %}     
            UPDATE_DELAYED_GCODE ID=HSLoadingg DURATION=7
      {% endif %}	
  {% endif %}
  #RESTORE_GCODE_STATE                                  # 恢复当前g代码坐标解析状态 如果指定“MOVE=1”，则将发出刀头移动以返回到先前的 XYZ 位置。如果指定了“MOVE_SPEED”，则刀头移动将以给定速度（以毫米/秒为单位）执行；否则工具头移动将使用恢复的 g 代码速度

########################################
# 换色宏 移动到指定位置
########################################
[gcode_macro change_dock]
description: 在klipper配置下更换耗材(吐料)时停靠地点
gcode:
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set jinliao = COLORS_VAR.jinliao|int %}
  {% set X = COLORS_VAR.xm6|float %}
  {% set Y = COLORS_VAR.ym6|float %}
  {% set min_temp = COLORS_VAR.min_temp|int %}               # 设置变量“最低挤出温度判定”
  {% set default_temp = COLORS_VAR.default_temp|int %}       # 设置变量“低于最低挤出温度后设定默认温度”
  #{% set Z = params.Z|default(10)|float %}
  #SAVE_GCODE_STATE NAME=M600_state # 保存当前g代码坐标解析状态，便于进行Gcode编辑后恢复状态
  #PAUSE
  {% if "xyz" not in printer.toolhead.homed_axes %}     # 如果未归零 打印机归零
   G28
  {% endif %}

  #{% if printer.extruder.temperature < min_temp %}      #feiw 如果当前挤出机温度不够 加热挤出机到默认温度
  #  M109 S{default_temp}
  #{% else %}
  #  M104 S{printer.extruder.temperature}
  #% endif %}

  G90                         #所有轴使用绝对定位（正常工作是用的g90绝对值）
  M83                         #挤出机使用相对定位
#  G91 # 设置相对坐标模式(G91)
  G1 E-.8 F2700
  #G1 Z{Z}
#  G90 # 设置绝对坐标模式(G90)
  G1 X{X} Y{Y} F9000
#  G91 # 设置相对坐标模式(G91)
  # 向前推进挤出加热过程中膨胀的耗材，让回抽的耗材尽可能不要头部膨胀    【在没有夹持耗材前执行】
  G1 E5 F500
  M400
  G1 E-.8 F9000
  #RESTORE_GCODE_STATE NAME=M600_state # 恢复当前g代码坐标解析状态


########################################
# 用于判断当前是否是T0挤出的宏
# QUERY_FILAMENT_SENSOR SENSOR=T0_sensor【控制台输入 查看是否触发】
########################################

[gcode_macro default_T0]
description: 将耗材位置置于初始T0不被夹持位【恢复默认状态】
gcode:
#  {% if "QUERY_FILAMENT_SENSOR SENSOR=T0_sensor" == True %}
  {% if printer['filament_switch_sensor default_T0_sensor'].filament_detected == True %}  #feiw 当开关“T0_sensor”结果为检查到耗材为真时
    # 无执行项
  {% else %}
    MANUAL_STEPPER STEPPER=filament_select SET_POSITION=0 MOVE=360 STOP_ON_ENDSTOP=1
    ## 【如果指定STOP_ON_ENDSTOP=1，则如果ENDSTOP报告触发，则移动将提前结束（使用STOP_ON_ENDSTOP=2完成移动，即使ENDSTOP未触发，也不会出错】
    MANUAL_STEPPER STEPPER=filament_select SET_POSITION=0 MOVE=0
;    MANUAL_STEPPER STEPPER=filament_select MOVE=180                             # 由于改成了同步挤出模式，默认T0工况为夹住T0
    SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=now_filament VALUE=0           # 修改耗材色号为T0
  {% endif %}

########################################
# 用于一键切换挤出耗材"Tn"的宏
# 没有上一个颜色是什么的判断 因为被储存在了{now_filament}内
########################################

[gcode_macro T0]
description: 将当前切换为T0(保证当前为T0耗材)
gcode:
  {% set C_temp = params.C_TEMP|default(200)|float %}  #feiw 传参 颜色切换时变化温度
  Tn T_FILAMENT=0 C_TEMP={C_temp}

[gcode_macro T1]
description: 将当前切换为T1(保证当前为T1耗材)
gcode:
  {% set C_temp = params.C_TEMP|default(201)|float %}  #feiw 传参 颜色切换时变化温度
  Tn T_FILAMENT=1 C_TEMP={C_temp}
  
[gcode_macro T2]
description: 将当前切换为T2(保证当前为T2耗材)
gcode:
  {% set C_temp = params.C_TEMP|default(202)|float %}  #feiw 传参 颜色切换时变化温度
  Tn T_FILAMENT=2 C_TEMP={C_temp}
    
[gcode_macro T3]
description: 将当前切换为T3(保证当前为T3耗材)
gcode:
  {% set C_temp = params.C_TEMP|default(203)|float %}  #feiw 传参 颜色切换时变化温度
  Tn T_FILAMENT=3 C_TEMP={C_temp}

########################################
# 用于切换夹持状态的宏（设定T1耗材丝夹持为初始位）（即当前使用T0耗材）
########################################
[gcode_macro J_Tn]
description: 更换耗材夹持Tn
#{printer["gcode_macro _ERCF_VAR"].colorselector[params.TOOL|int]}
gcode:
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set S_filament = COLORS_VAR.colorselector[params.T_FILAMENT|int] %}
  {% set T_filament = params.T_FILAMENT|float %}       # T_FILAMENT=(0,1,2,3) 引用虚拟外部变量(指定耗材号)
  # MANUAL_STEPPER STEPPER=filament_select SET_POSITION=0 MOVE=0 
  #{% set Current_T = params.T_FILAMENT|default(0)|float %} #T_FILAMENT=(0,1,2,3)
  MANUAL_STEPPER STEPPER=filament_select MOVE={S_filament}                      # 将耗材丝选择挤出机至于指定角度位置 夹持T【params.T_FILAMENT】耗材
  SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=now_filament VALUE={T_filament}  # 修改耗材色号为 【params.T_FILAMENT】

[gcode_macro UnJ_T]
description: 关闭指定耗材丝夹持(不指定则默认关联【now_filament】)
gcode: 
  #{% set Current_T = params.T_FILAMENT|default(0)|float %} 
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set now_filament = COLORS_VAR.now_filament|int %}
  {% set Current_T = params.T_FILAMENT|default(now_filament)|float %}   #T_FILAMENT=(0,1,2,3) 引用虚拟外部变量
  # MANUAL_STEPPER STEPPER=filament_select MOVE=180                   # 将耗材丝选择挤出机旋转180度 松开当前耗材夹持
  # MANUAL_STEPPER STEPPER=filament_select SET_POSITION=0 MOVE=180    # 将耗材丝选择挤出机当前位置置于0，然后旋转180度 松开当前耗材夹持

  {% if Current_T == 0 %}
    MANUAL_STEPPER STEPPER=filament_select MOVE=0                     # 将耗材丝选择挤出机至于0度位置 松开T0耗材
  {% elif Current_T == -1 %}
    MANUAL_STEPPER STEPPER=filament_select MOVE=0                     # 将耗材丝选择挤出机至于0度位置 松开T0耗材(开机初始状态下，前色值为-1)
  {% elif Current_T == 1 %}
    MANUAL_STEPPER STEPPER=filament_select MOVE=180                   # 将耗材丝选择挤出机至于180度位置 松开T1耗材
  {% elif Current_T == 2 %}
    MANUAL_STEPPER STEPPER=filament_select MOVE=90                    # 将耗材丝选择挤出机至于90度位置 松开T2耗材
  {% elif Current_T == 3 %}
    MANUAL_STEPPER STEPPER=filament_select MOVE=-90                   # 将耗材丝选择挤出机至于-90度位置 松开T3耗材
  {% endif %}
  #SYNC_EXTRUDER_MOTION EXTRUDER=extruder_T MOTION_QUEUE= # 将挤出电机extruder_T与挤出功能断开同步（停用自定义的挤出机电机）

########################################
# 用于关闭多色电机的宏
########################################
[gcode_macro colors_motion_off]
description: Turn off both ERCF motors
gcode:
  MANUAL_STEPPER STEPPER=gear_stepper ENABLE=0
  MANUAL_STEPPER STEPPER=filament_motion ENABLE=0


[gcode_macro UnT]
description: 卸载指定耗材(多色过程断电重启后从其他耗材退出)
gcode: 
  {% set COLORS_VAR = printer["gcode_macro COLORS_VAR"] %}
  {% set now_filament = COLORS_VAR.now_filament|int %}
  {% set previous_filament = params.PREVIOUS_FILAMENT|default(now_filament)|int %} #feiw 传参 断电时候的耗材的序号 “0、1、2、3”
  #SAVE_GCODE_STATE # 保存当前g代码坐标解析状态，便于进行Gcode编辑后恢复状态
  ;{% if previous_filament != 0 %}  #feiw 判断当前耗材丝，如果不等于T0
  default_T0
  J_Tn  T_FILAMENT={previous_filament}               #feiw 复夹持当前耗材
  change_dock                                        #feiw 移动到换色坞
  change_out T_FILAMENT={previous_filament}          #feiw 执行换色前处理(退丝) 本步骤总含有温度确认 不足加热到default_temp
  nozzle1                                            #feiw 切断废料
  ;{% endif %}
  UnJ_T
  SET_GCODE_VARIABLE MACRO=COLORS_VAR VARIABLE=now_filament VALUE=-1           # 一切打印结束后修改耗材色号为 -1，耗材已经退出
  ;default_T0                                        #feiw 刷新【now_filament】
  #RESTORE_GCODE_STATE
#####################################################################################
#                              以下内容需要配置pin脚                                 #
#####################################################################################

########################################
# 引脚复用相关配置
########################################
[duplicate_pin_override]
pins:  f_color:endstop,  f_color:encoder,  f_color:extra
#   一个逗号分隔的引脚列表，允许其中的引脚在配置文件中被多次使用而不触发错误检查。
#   必须提供此参数。

########################################
# 其他耗材对应的挤出
########################################
[manual_stepper filament_select] #feiw 对应M3轴设置 手动步进电机-耗材选择
# 使用实例 【MANUAL_STEPPER STEPPER=filament_select MOVE=90 SPEED=360】 控制以速度5mm/s 旋转90长度
step_pin: f_color:s_stp
dir_pin: !f_color:s_dir        #feiw 电机方向引脚设置 感叹号反向
enable_pin: !f_color:s_en
microsteps: 16                  #feiw 细分
rotation_distance: 360          #feiw 定义一圈对应的长度。此处用法特殊 用于标记选择多少度【千万不要乱改】
full_steps_per_rotation: 200    #feiw 定义旋转一圈的脉冲
velocity:10000 #10000
#   设置步进电机的默认速度（单位：mm/s）。这个值会在 MANUAL_STEPPER
#   命令没有指定一个 SPEED 参数时会被使用。
#   默认为 5 mm/s。
accel:800
#   设置步进电机的默认加速度（单位：mm/s^2）。设置加速度为零将导致
#   没有加速度。这个值会在 MANUAL_STEPPER 命令没有指定 ACCEL 参数时
#   会被使用。
#   默认为 0。
endstop_pin: ^!f_color:endstop #接口 (感叹号取反)
#   限位开关检测引脚。如果定义了这个参数，可以通过在 MANUAL_STEPPER
#   运动命令中添加一个 STOP_ON_ENDSTOP 参数来执行 "归位动作" 。
[tmc2208 manual_stepper filament_select]
uart_pin: f_color:gpio3
                #feiw 驱动通信地址
interpolate: False
run_current: 1.0 #0.9
hold_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 999999

[manual_stepper filament_motion] #feiw 对应M2轴设置 手动步进电机-送料
;extruder:extruder               #feiw 设置将要被同步到那个挤出机 默认与挤出机同步
step_pin: f_color:m_stp
dir_pin: !f_color:m_dir         #feiw 电机方向引脚设置 感叹号反向
enable_pin: !f_color:m_en
microsteps: 16                  #feiw 细分
rotation_distance: 33.7 #30.5         #feiw 选择一圈对应的圆周长度 矫正方法："MANUAL_STEPPER STEPPER=filament_motion SET_POSITION=0 SPEED=150 ACCEL=3000 MOVE=-50 [T0orT2挤出50mm] 计算方式：实际挤出A x 现在rotation_distance值 / 需要挤出数值B
#gear_ratio:50:17                #feiw 无齿比 {bmg挤出机 50:17}{fz36挤出机 50:10}{伽利略挤出机 7.5:1}
full_steps_per_rotation: 200    #feiw 定义旋转一圈的脉冲
accel:300                       #feiw 设置加速度默认值（不指定为0）
endstop_pin: ^!f_color:encoder   #接口 (感叹号取反) [缓存高限位 触发立停]

[tmc2208 manual_stepper filament_motion]
uart_pin: f_color:gpio4
              #feiw 驱动通信地址
interpolate: False
run_current: 1.5 #1.5
hold_current: 0.5               #feiw 保持电流 静止不懂时的电流
sense_resistor: 0.110
stealthchop_threshold: 999999

########################################
# 用于判断的开关
# QUERY_FILAMENT_SENSOR SENSOR=T0_sensor
# {% if printer['filament_switch_sensor T0_sensor'].filament_detected == True %}
########################################
[filament_switch_sensor default_T0_sensor] #确认当前选料电机停靠位为【松开T0夹持】,switch接常开
pause_on_runout: False            
switch_pin: ^!f_color:endstop


